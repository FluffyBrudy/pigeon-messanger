generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  id                String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username          String               @db.VarChar(50)
  email             String               @unique
  password          String               @db.VarChar(64)
  created_at        DateTime             @default(now())
  friendshipAsUser1 AcceptedFriendship[] @relation("AcceptedFriendshipUserOne")
  friendshipAsUser2 AcceptedFriendship[] @relation("AcceptedFriendshipUserTwo")
  FriendshipFriend  FriendshipRequest[]  @relation("FriendshipRequestFriend")
  FriendshipUser    FriendshipRequest[]  @relation("FriendshipRequestUser")
  chatGroup         Group[]
  message           Message[]
  messageRecipient  MessageRecipient[]
  profile           Profile?

  @@schema("public")
}

model Group {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String             @db.VarChar(50)
  createdAt        DateTime?          @default(now()) @db.Date
  isActive         Boolean?           @default(false)
  adminId          String             @db.Uuid
  admin            User               @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ChatGroup_admin_id_fk")
  GroupMessage     GroupMessage[]
  messageRecipient MessageRecipient[]

  @@schema("public")
}

model Message {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  messageBody      String
  isFile           Boolean            @default(false)
  createdAt        DateTime?          @default(now()) @db.Timestamptz()
  parentMessageId  String?            @db.Uuid
  expiryDate       DateTime?          @db.Date
  creatorId        String             @db.Uuid
  GroupMessage     GroupMessage[]
  creator          User               @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messageRecipient MessageRecipient[]

  @@index([creatorId])
  @@schema("public")
}

model GroupMessage {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  group_id   String   @db.Uuid
  message_id String   @db.Uuid
  created_at DateTime
  is_active  Boolean  @default(false)
  group      Group    @relation(fields: [group_id], references: [id])
  message    Message  @relation(fields: [message_id], references: [id])

  @@schema("public")
}

model MessageRecipient {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipientId String   @db.Uuid
  groupId     String?  @db.Uuid
  isRead      Boolean? @default(false)
  messageId   String   @db.Uuid
  chatGroup   Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ChatGroup_group_id_fk")
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reciptient  User     @relation(fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([recipientId])
  @@schema("public")
}

model Profile {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String  @unique @db.Uuid
  picture     String  @default("https://res.cloudinary.com/dlygf7xye/image/upload/v1736098504/00721c9db2261d4ab0f9528ba9f3c7f2e70f5330.png") @db.Text
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  initialized Boolean @default(false)

  @@schema("public")
}

model FriendshipRequest {
  userId     String   @db.Uuid
  friendId   String   @db.Uuid
  created_at DateTime @default(now())
  friend     User     @relation("FriendshipRequestFriend", fields: [friendId], references: [id], onDelete: Cascade)
  user       User     @relation("FriendshipRequestUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@schema("public")
}

model AcceptedFriendship {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId1 String @db.Uuid
  userId2 String @db.Uuid
  user1   User   @relation("AcceptedFriendshipUserOne", fields: [userId1], references: [id], onDelete: Cascade)
  user2   User   @relation("AcceptedFriendshipUserTwo", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2])
  @@unique([userId2, userId1])
  @@schema("public")
}
